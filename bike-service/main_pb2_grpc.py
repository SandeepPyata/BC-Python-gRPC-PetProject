# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import main_pb2 as main__pb2


class RideStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCustomer = channel.unary_unary(
                '/mainFile.Ride/CreateCustomer',
                request_serializer=main__pb2.CustomerDetails.SerializeToString,
                response_deserializer=main__pb2.CustomerDetails.FromString,
                )
        self.CreateAdmin = channel.unary_unary(
                '/mainFile.Ride/CreateAdmin',
                request_serializer=main__pb2.AdminDetails.SerializeToString,
                response_deserializer=main__pb2.AdminDetails.FromString,
                )
        self.CreateDriver = channel.unary_unary(
                '/mainFile.Ride/CreateDriver',
                request_serializer=main__pb2.DriverDetails.SerializeToString,
                response_deserializer=main__pb2.DriverDetails.FromString,
                )
        self.UpdateUserProfile = channel.unary_unary(
                '/mainFile.Ride/UpdateUserProfile',
                request_serializer=main__pb2.UserProfileDetails.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.GetAllDriverDocs = channel.unary_unary(
                '/mainFile.Ride/GetAllDriverDocs',
                request_serializer=main__pb2.Empty.SerializeToString,
                response_deserializer=main__pb2.AllDriversDocs.FromString,
                )
        self.UpdateVerifiedDriverStatus = channel.unary_unary(
                '/mainFile.Ride/UpdateVerifiedDriverStatus',
                request_serializer=main__pb2.DriverVerificationStatus.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.CreateBooking = channel.unary_unary(
                '/mainFile.Ride/CreateBooking',
                request_serializer=main__pb2.BookingDetails.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.CancelBooking = channel.unary_unary(
                '/mainFile.Ride/CancelBooking',
                request_serializer=main__pb2.BookingId.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.UpdateBookingStatus = channel.unary_unary(
                '/mainFile.Ride/UpdateBookingStatus',
                request_serializer=main__pb2.BookingStatus.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.UpdateDriverStatus = channel.unary_unary(
                '/mainFile.Ride/UpdateDriverStatus',
                request_serializer=main__pb2.DriverAvailabilityStatus.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.UpdatePaymentStatus = channel.unary_unary(
                '/mainFile.Ride/UpdatePaymentStatus',
                request_serializer=main__pb2.PaymentStatus.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.UploadDriverDocs = channel.unary_unary(
                '/mainFile.Ride/UploadDriverDocs',
                request_serializer=main__pb2.SingleDriverDocs.SerializeToString,
                response_deserializer=main__pb2.Acknowledgement.FromString,
                )
        self.GetAvailableDriversList = channel.unary_unary(
                '/mainFile.Ride/GetAvailableDriversList',
                request_serializer=main__pb2.Empty.SerializeToString,
                response_deserializer=main__pb2.AvailableDrivers.FromString,
                )


class RideServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCustomer(self, request, context):
        """Creation of roles - INSERT
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUserProfile(self, request, context):
        """Updation of roles' details(User Table) - Basic Info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllDriverDocs(self, request, context):
        """Admin Functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateVerifiedDriverStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBooking(self, request, context):
        """Customer-Initiated Functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelBooking(self, request, context):
        """Called when trip is cancelled by customer/driver, Update booking status : cancelled, driver availability : available, payment status : not-applicable
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBookingStatus(self, request, context):
        """Status related
        Called when trip is started/ended
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDriverStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePaymentStatus(self, request, context):
        """Called after trip ended/cancelled
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadDriverDocs(self, request, context):
        """Driver-Initiated(Related) Functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableDriversList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCustomer,
                    request_deserializer=main__pb2.CustomerDetails.FromString,
                    response_serializer=main__pb2.CustomerDetails.SerializeToString,
            ),
            'CreateAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAdmin,
                    request_deserializer=main__pb2.AdminDetails.FromString,
                    response_serializer=main__pb2.AdminDetails.SerializeToString,
            ),
            'CreateDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDriver,
                    request_deserializer=main__pb2.DriverDetails.FromString,
                    response_serializer=main__pb2.DriverDetails.SerializeToString,
            ),
            'UpdateUserProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUserProfile,
                    request_deserializer=main__pb2.UserProfileDetails.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'GetAllDriverDocs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllDriverDocs,
                    request_deserializer=main__pb2.Empty.FromString,
                    response_serializer=main__pb2.AllDriversDocs.SerializeToString,
            ),
            'UpdateVerifiedDriverStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateVerifiedDriverStatus,
                    request_deserializer=main__pb2.DriverVerificationStatus.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'CreateBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBooking,
                    request_deserializer=main__pb2.BookingDetails.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'CancelBooking': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelBooking,
                    request_deserializer=main__pb2.BookingId.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'UpdateBookingStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBookingStatus,
                    request_deserializer=main__pb2.BookingStatus.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'UpdateDriverStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDriverStatus,
                    request_deserializer=main__pb2.DriverAvailabilityStatus.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'UpdatePaymentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePaymentStatus,
                    request_deserializer=main__pb2.PaymentStatus.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'UploadDriverDocs': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadDriverDocs,
                    request_deserializer=main__pb2.SingleDriverDocs.FromString,
                    response_serializer=main__pb2.Acknowledgement.SerializeToString,
            ),
            'GetAvailableDriversList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableDriversList,
                    request_deserializer=main__pb2.Empty.FromString,
                    response_serializer=main__pb2.AvailableDrivers.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mainFile.Ride', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Ride(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/CreateCustomer',
            main__pb2.CustomerDetails.SerializeToString,
            main__pb2.CustomerDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/CreateAdmin',
            main__pb2.AdminDetails.SerializeToString,
            main__pb2.AdminDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/CreateDriver',
            main__pb2.DriverDetails.SerializeToString,
            main__pb2.DriverDetails.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUserProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/UpdateUserProfile',
            main__pb2.UserProfileDetails.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllDriverDocs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/GetAllDriverDocs',
            main__pb2.Empty.SerializeToString,
            main__pb2.AllDriversDocs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateVerifiedDriverStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/UpdateVerifiedDriverStatus',
            main__pb2.DriverVerificationStatus.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/CreateBooking',
            main__pb2.BookingDetails.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelBooking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/CancelBooking',
            main__pb2.BookingId.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBookingStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/UpdateBookingStatus',
            main__pb2.BookingStatus.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDriverStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/UpdateDriverStatus',
            main__pb2.DriverAvailabilityStatus.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePaymentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/UpdatePaymentStatus',
            main__pb2.PaymentStatus.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadDriverDocs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/UploadDriverDocs',
            main__pb2.SingleDriverDocs.SerializeToString,
            main__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAvailableDriversList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mainFile.Ride/GetAvailableDriversList',
            main__pb2.Empty.SerializeToString,
            main__pb2.AvailableDrivers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
