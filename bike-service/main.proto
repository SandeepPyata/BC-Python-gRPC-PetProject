syntax = "proto3";

package mainFile;

service Ride
{
    // Creation of roles - INSERT
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse){};

    // rpc CreateCustomer(CustomerDetails) returns(CustomerDetails){};
    // rpc CreateAdmin(AdminDetails) returns(AdminDetails){};
    // rpc CreateDriver(DriverDetails) returns(DriverDetails){};

    // Updation of roles' details(User Table) - Basic Info
    rpc UpdateUserProfile(User) returns(User){};

    // Admin Functions
    rpc GetAllDrivers(Empty) returns (DriversList) {}
    // rpc GetAllDriverDocs(Empty) returns(AllDriversDocs){};
    rpc ToggleDriverVerification(Driver) returns(Driver){};

    // Customer-Initiated Functions
    rpc CreateBooking(Booking) returns(Booking){};       // Called Only after booked
    // Called when trip is cancelled by customer/driver, Update booking status : cancelled, driver availability : available, payment status : not-applicable
    rpc CancelBooking(Booking) returns(Booking){};
    
    // Status related    
    rpc UpdateBookingStatus(Booking) returns(Booking){};          // Called when trip is started/ended
    rpc UpdateDriverAvailabilityStatus(Driver) returns(Driver){};
    rpc UpdatePaymentStatus(Booking) returns(Booking){};          // Called after trip ended/cancelled

    // Driver-Initiated(Related) Functions
    rpc UploadDriverDocs(Driver) returns(Driver){};
    // rpc GetAvailableDriversList(Empty) returns(DriversList){};
}

message AvailableDrivers {
    message Drivers {
        int32 driver_id = 1;
        string driver_name = 2;
        int64 phone_no = 3;
        double current_location_lat = 4;
        double current_location_long = 5;
        int32 rating = 6;
    }
    repeated Drivers driver_list = 1;
}

// payment_status=default "NotPaid";
message PaymentStatus {
    int32 booking_id = 1;
    enum StatusType {
        NOTPAID = 0;        // default status
        PAID = 1;
        NOTAPPLICABLE = 2;
    }
    StatusType status = 2;
}


message DriverAvailabilityStatus {
    int32 driver_id = 1;
    enum StatusType {
        UNAVAILABLE = 0; // default status
        AVAILABLE = 1;
        IN_TRIP = 2;
    }
    StatusType status = 2;
}

// booking_status=default "booked";
message BookingStatus {
    int32 booking_id = 1;
    enum StatusType {
        BOOKED = 0;        // default status
        CANCELLED = 1;
        INPROGRESS = 2;
        COMPLETED = 3;
    }
    StatusType status = 2;
}

message Booking {
    int64 id = 1;
    string booked_time = 1;
    int32 final_fare = 2;
    int32 driver_id = 3;
    int32 customer_id = 4;
    string pickup_location_text = 5;
    string drop_location_text = 6;
    double pickup_location_lat = 7;
    double pickup_location_long = 8;
    double drop_location_lat = 9;
    double drop_location_long = 10;
}


message Acknowledgement {
    string response = 1;
}

message DriverVerificationStatus {
    int32 driver_id = 1;
    string driver_verification_status = 2;
}

// message DriverFilters {
//     StatusType status = 1;
//     int32 rating = 2;
//     int32 nearest = 3;
// }

message Driver {
    User user = 1;
    DriverDocs driver_docs = 2;
    enum StatusType {
        UNAVAILABLE = 0; // default status
        AVAILABLE = 1;
        IN_TRIP = 2;
    }
    StatusType status = 2;
}

message DriversList {
    repetated Driver data = 1;
}

message AllDriversDocs {    
    repeated DriverDocs driver_docs = 1;
}
message DriverDocs {
    string bike_registration_number = 2;
    string license_docs_link = 3;
    string docs_link = 4;
    User admin = 5;
    // optional int32 admin_id = 5;
}

message Empty {}

message DriverDetails {
    int32 id = 1;
    string typeOfUser = 2;
    double current_location_lat = 3;
    double current_location_long = 4;
    int32 rating = 5;
    enum StatusType {
        UNAVAILABLE = 0; // default status
        AVAILABLE = 1;
        IN_TRIP = 2;
    }
    StatusType driver_availability_status = 6;
    string driver_verified_status = 7;
    UserProfileDetails user = 8;
}

message AdminDetails{
    int32 id = 1;
    string typeOfUser = 2;
    UserProfileDetails user = 3;
}

message CustomerDetails {
    int32 id = 1;
    string typeOfUser = 2;
    int32 rating = 3;
    UserProfileDetails user = 4;
}

message User {
    string name = 1;
    string address = 2;
    uint64 phoneno = 3;
    string email = 4;
}


message Admin {
    User user = 1;
}

message Customer {
    User user = 1;
    int32 rating = 3;
    UserProfileDetails user = 4;
}

message CreateUserRequest {
    typeof 
    oneof user {
        Admin admin = 2;
        Customer customer = 3;
        Driver driver = 4;

    }
}

message CreateUserResponse {
    typeof 
    oneof user {
        Admin admin = 2;
        Customer customer = 3;
        Driver driver = 4;
    }
}